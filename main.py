{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e61cc3cd-586e-4208-8e25-ce2e64621b0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox\n",
    "from tkcalendar import DateEntry\n",
    "from PIL import Image, ImageTk\n",
    "import mysql.connector as mysql\n",
    "\n",
    "current_user = None\n",
    "\n",
    "# Define the color scheme\n",
    "PRIMARY_COLOR = \"#3498db\"\n",
    "SECONDARY_COLOR = \"#2ecc71\"\n",
    "BACKGROUND_COLOR = \"#ecf0f1\"\n",
    "TEXT_COLOR = \"#2c3e50\"\n",
    "WHITE_COLOR = \"#ffffff\"\n",
    "\n",
    "def login_window():\n",
    "    global current_user\n",
    "    login_window = tk.Tk()\n",
    "    login_window.title(\"Expense Tracker - Login\")\n",
    "    login_window.geometry(\"400x300\")\n",
    "    login_window.configure(bg=BACKGROUND_COLOR)\n",
    "\n",
    "    def validate_login():\n",
    "        global current_user\n",
    "        username = username_entry.get()\n",
    "        password = password_entry.get()\n",
    "\n",
    "        if not (username and password):\n",
    "            messagebox.showwarning(\"Login Error\", \"Please enter username and password.\")\n",
    "            return\n",
    "\n",
    "        conn = mysql.connect(host=\"localhost\", user=\"root\", password=\"anu@123\", database=\"expense_tracker\")\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"SELECT * FROM users WHERE username = %s AND password = %s\", (username, password))\n",
    "        user = cursor.fetchone()\n",
    "\n",
    "        if user:\n",
    "            current_user = username\n",
    "            login_window.destroy()\n",
    "            main_application()\n",
    "        else:\n",
    "            messagebox.showerror(\"Login Error\", \"Invalid username or password.\")\n",
    "\n",
    "        conn.close()\n",
    "\n",
    "    def open_registration_window():\n",
    "        login_window.destroy()\n",
    "        registration_window()\n",
    "\n",
    "    tk.Label(login_window, text=\"Username:\", font=(\"Arial\", 14), bg=BACKGROUND_COLOR, fg=TEXT_COLOR).pack(pady=10)\n",
    "    username_entry = tk.Entry(login_window, font=(\"Arial\", 12))\n",
    "    username_entry.pack(pady=5)\n",
    "\n",
    "    tk.Label(login_window, text=\"Password:\", font=(\"Arial\", 14), bg=BACKGROUND_COLOR, fg=TEXT_COLOR).pack(pady=10)\n",
    "    password_entry = tk.Entry(login_window, show='*', font=(\"Arial\", 12))\n",
    "    password_entry.pack(pady=5)\n",
    "\n",
    "    login_button = tk.Button(login_window, text=\"Login\", font=(\"Arial\", 14), bg=PRIMARY_COLOR, fg=WHITE_COLOR, command=validate_login)\n",
    "    login_button.pack(pady=20)\n",
    "\n",
    "    register_button = tk.Button(login_window, text=\"Register\", font=(\"Arial\", 14), bg=SECONDARY_COLOR, fg=WHITE_COLOR, command=open_registration_window)\n",
    "    register_button.pack(pady=10)\n",
    "\n",
    "    login_window.mainloop()\n",
    "\n",
    "def registration_window():\n",
    "    registration_window = tk.Tk()\n",
    "    registration_window.title(\"Expense Tracker - Registration\")\n",
    "    registration_window.geometry(\"500x400\")\n",
    "    registration_window.configure(bg=BACKGROUND_COLOR)\n",
    "\n",
    "    def register_user():\n",
    "        username = username_entry.get()\n",
    "        password = password_entry.get()\n",
    "        email = email_entry.get()\n",
    "\n",
    "        if not (username and password and email):\n",
    "            messagebox.showwarning(\"Registration Error\", \"Please enter all fields.\")\n",
    "            return\n",
    "\n",
    "        conn = mysql.connect(host=\"localhost\", user=\"root\", password=\"anu@123\", database=\"expense_tracker\")\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"INSERT INTO users (username, password, email) VALUES (%s, %s, %s)\", (username, password, email))\n",
    "        conn.commit()\n",
    "        messagebox.showinfo(\"Registration Success\", \"User registered successfully.\")\n",
    "        registration_window.destroy()\n",
    "        login_window()\n",
    "        conn.close()\n",
    "\n",
    "    tk.Label(registration_window, text=\"Username:\", font=(\"Arial\", 14), bg=BACKGROUND_COLOR, fg=TEXT_COLOR).pack(pady=10)\n",
    "    username_entry = tk.Entry(registration_window, font=(\"Arial\", 12))\n",
    "    username_entry.pack(pady=5)\n",
    "\n",
    "    tk.Label(registration_window, text=\"Password:\", font=(\"Arial\", 14), bg=BACKGROUND_COLOR, fg=TEXT_COLOR).pack(pady=10)\n",
    "    password_entry = tk.Entry(registration_window, show='*', font=(\"Arial\", 12))\n",
    "    password_entry.pack(pady=5)\n",
    "\n",
    "    tk.Label(registration_window, text=\"Email:\", font=(\"Arial\", 14), bg=BACKGROUND_COLOR, fg=TEXT_COLOR).pack(pady=10)\n",
    "    email_entry = tk.Entry(registration_window, font=(\"Arial\", 12))\n",
    "    email_entry.pack(pady=5)\n",
    "\n",
    "    register_button = tk.Button(registration_window, text=\"Register\", font=(\"Arial\", 14), bg=PRIMARY_COLOR, fg=WHITE_COLOR, command=register_user)\n",
    "    register_button.pack(pady=20)\n",
    "    back_to_login_button = tk.Button(registration_window, text=\"Back to Login\", bg=\"#ff4d4d\", fg=TEXT_COLOR, font=(\"Arial\", 14), command=lambda: [registration_window.destroy(), login_window()])\n",
    "    back_to_login_button.pack(pady=10)\n",
    "    registration_window.mainloop()\n",
    "\n",
    "def main_application():\n",
    "    global main_window\n",
    "    main_window = tk.Tk()\n",
    "    main_window.title(\"Expense Tracker - Main Application\")\n",
    "    main_window.geometry(\"1250x800\")\n",
    "    main_window.configure(bg=BACKGROUND_COLOR)\n",
    "\n",
    "    button_frame = tk.Frame(main_window, bg=BACKGROUND_COLOR)\n",
    "    button_frame.pack(side=tk.LEFT, fill=tk.Y)\n",
    "\n",
    "    button_font = Font(family=\"Arial\", size=14, weight=\"bold\")\n",
    "\n",
    "    dashboard_button = tk.Button(button_frame, text=\"Dashboard\", command=lambda: notebook.select(dashboard_frame), height=8, width=25, font=button_font, bg=PRIMARY_COLOR, fg=WHITE_COLOR)\n",
    "    dashboard_button.pack(fill=tk.X, pady=10)\n",
    "\n",
    "    add_expense_button = tk.Button(button_frame, text=\"Add Expense\", command=lambda: notebook.select(add_edit_frame), height=8, width=25, font=button_font, bg=PRIMARY_COLOR, fg=WHITE_COLOR)\n",
    "    add_expense_button.pack(fill=tk.X, pady=5)\n",
    "\n",
    "    add_income_button = tk.Button(button_frame, text=\"Add/Edit Income\", command=lambda: notebook.select(add_edit_income_frame), height=8, width=25, font=button_font, bg=PRIMARY_COLOR, fg=WHITE_COLOR)\n",
    "    add_income_button.pack(fill=tk.X, pady=5)\n",
    "\n",
    "    all_expenses_button = tk.Button(button_frame, text=\"All Expenses\", command=lambda: notebook.select(all_expenses_frame), height=8, width=25, font=button_font, bg=PRIMARY_COLOR, fg=WHITE_COLOR)\n",
    "    all_expenses_button.pack(fill=tk.X, pady=5)\n",
    "\n",
    "    notebook_frame = tk.Frame(main_window, bg=BACKGROUND_COLOR)\n",
    "    notebook_frame.pack(side=tk.RIGHT, expand=True, fill='both')\n",
    "\n",
    "    notebook = ttk.Notebook(notebook_frame)\n",
    "    notebook.pack(expand=True, fill='both')\n",
    "\n",
    "    dashboard_frame = tk.Frame(notebook, bg=BACKGROUND_COLOR )\n",
    "    notebook.add(dashboard_frame, text=\"\")\n",
    "    display_dashboard(dashboard_frame)\n",
    "\n",
    "    add_edit_frame = tk.Frame(notebook, bg=BACKGROUND_COLOR )\n",
    "    notebook.add(add_edit_frame, text=\"\")\n",
    "    display_add_edit_expense(add_edit_frame)\n",
    "\n",
    "    add_edit_income_frame = tk.Frame(notebook, bg=BACKGROUND_COLOR )\n",
    "    notebook.add(add_edit_income_frame, text=\"\")\n",
    "    display_add_edit_income(add_edit_income_frame)\n",
    "\n",
    "    all_expenses_frame = tk.Frame(notebook, bg=BACKGROUND_COLOR )\n",
    "    notebook.add(all_expenses_frame, text=\"\")\n",
    "    display_all_expenses(all_expenses_frame)\n",
    "    logout_button = tk.Button(button_frame, text=\"Logout\", command=logout, height=2, width=20, font=button_font, bg=\"#ff4d4d\", fg=TEXT_COLOR)\n",
    "    logout_button.pack(fill=tk.X, pady=10)\n",
    "    logout_button.bind(\"<Enter>\", lambda e: logout_button.config(bg=\"#cc0000\"))\n",
    "    logout_button.bind(\"<Leave>\", lambda e: logout_button.config(bg=\"#ff4d4d\"))\n",
    "    main_window.mainloop()\n",
    "    \n",
    "def logout():\n",
    "    global main_window, current_user\n",
    "    if messagebox.askyesno(\"Logout\", \"Are you sure you want to log out?\"):\n",
    "        main_window.destroy()\n",
    "        current_user = None\n",
    "        login_window()\n",
    "def display_dashboard(frame):\n",
    "    tk.Label(frame, text=\"Welcome to Dashboard\", bg=BACKGROUND_COLOR , fg=PRIMARY_COLOR, font=(\"Arial\", 28)).pack(pady=20)\n",
    "\n",
    "    tk.Label(frame, text=\"Total Expenses:\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 18), anchor='center').pack(fill=tk.X, pady=5)\n",
    "    total_expenses_label = tk.Label(frame, text=\"\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 18), anchor='center')\n",
    "    total_expenses_label.pack(fill=tk.X, pady=5)\n",
    "\n",
    "    tk.Label(frame, text=\"Total Income:\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 18), anchor='center').pack(fill=tk.X, pady=5)\n",
    "    total_income_label = tk.Label(frame, text=\"\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 18), anchor='center')\n",
    "    total_income_label.pack(fill=tk.X, pady=5)\n",
    "\n",
    "    tk.Label(frame, text=\"Balance:\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 18), anchor='center').pack(fill=tk.X, pady=5)\n",
    "    balance_label = tk.Label(frame, text=\"\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 18), anchor='center')\n",
    "    balance_label.pack(fill=tk.X, pady=5)\n",
    "\n",
    "    def update_dashboard():\n",
    "        conn = mysql.connect(host=\"localhost\", user=\"root\", password=\"anu@123\", database=\"expense_tracker\")\n",
    "        cursor = conn.cursor()\n",
    "\n",
    "        cursor.execute(\"SELECT SUM(amount) FROM expenses WHERE user_id = (SELECT id FROM users WHERE username = %s)\", (current_user,))\n",
    "        total_expenses = cursor.fetchone()[0] or 0\n",
    "        total_expenses_label.config(text=f\"₹ {total_expenses:.2f}\")\n",
    "\n",
    "        cursor.execute(\"SELECT SUM(amount) FROM income WHERE user_id = (SELECT id FROM users WHERE username = %s)\", (current_user,))\n",
    "        total_income = cursor.fetchone()[0] or 0\n",
    "        total_income_label.config(text=f\"₹ {total_income:.2f}\")\n",
    "\n",
    "        balance = total_income - total_expenses\n",
    "        balance_label.config(text=f\"₹ {balance:.2f}\")\n",
    "\n",
    "        conn.close()\n",
    "\n",
    "        \n",
    "    update_button = tk.Button(frame,bg=PRIMARY_COLOR, fg=WHITE_COLOR, text=\"Update Dashboard\", font=(\"Arial\", 14), command=update_dashboard)\n",
    "    update_button.pack(pady=30)\n",
    "\n",
    "\n",
    "    update_dashboard()\n",
    "\n",
    "def display_add_edit_expense(frame):\n",
    "    tk.Label(frame, text=\"Add/Edit Expense\", bg=BACKGROUND_COLOR , fg=PRIMARY_COLOR, font=(\"Arial\", 28)).pack(pady=20)\n",
    "\n",
    "    tk.Label(frame, text=\"Date (DD-MM-YYYY):\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 14)).pack()\n",
    "    date_entry = DateEntry(frame, date_pattern=\"dd-mm-yyyy\", font=(\"Arial\", 12))\n",
    "    date_entry.pack(pady=5)\n",
    "\n",
    "    tk.Label(frame, text=\"Category:\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 14)).pack()\n",
    "    category_entry = tk.Entry(frame, font=(\"Arial\", 12))\n",
    "    category_entry.pack(pady=5)\n",
    "\n",
    "    tk.Label(frame, text=\"Amount:\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 14)).pack()\n",
    "    amount_entry = tk.Entry(frame, font=(\"Arial\", 12))\n",
    "    amount_entry.pack(pady=5)\n",
    "\n",
    "    tk.Label(frame, text=\"Description:\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 14)).pack()\n",
    "    description_entry = tk.Text(frame, height=5, font=(\"Arial\", 12))\n",
    "    description_entry.pack(pady=5)\n",
    "\n",
    "    def add_edit_expense():\n",
    "        date = date_entry.get_date()\n",
    "        category = category_entry.get()\n",
    "        amount = amount_entry.get()\n",
    "        description = description_entry.get(\"1.0\", tk.END).strip()\n",
    "\n",
    "        if not (date and category and amount):\n",
    "            messagebox.showwarning(\"Add Expense\", \"Please enter all required fields.\")\n",
    "            return\n",
    "\n",
    "        conn = mysql.connect(host=\"localhost\", user=\"root\", password=\"anu@123\", database=\"expense_tracker\")\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"INSERT INTO expenses (user_id, expanse_date, category, amount, description) VALUES ((SELECT id FROM users WHERE username = %s), %s, %s, %s, %s)\",\n",
    "                       (current_user, date, category, amount, description))\n",
    "        conn.commit()\n",
    "        messagebox.showinfo(\"Add/Edit Expense\", \"Expense added successfully.\")\n",
    "        conn.close()\n",
    "\n",
    "        date_entry.delete(0, tk.END)\n",
    "        category_entry.delete(0, tk.END)\n",
    "        amount_entry.delete(0, tk.END)\n",
    "        description_entry.delete(\"1.0\", tk.END)\n",
    "\n",
    "    add_edit_button = tk.Button(frame, text=\"Add/Edit Expense\", font=(\"Arial\", 14), bg=PRIMARY_COLOR, fg=WHITE_COLOR, command=add_edit_expense)\n",
    "    add_edit_button.pack(pady=10)\n",
    "\n",
    "\n",
    "def display_add_edit_income(frame):\n",
    "    tk.Label(frame, text=\"Add/Edit Income\", bg=BACKGROUND_COLOR , fg=PRIMARY_COLOR, font=(\"Arial\", 28)).pack(pady=20)\n",
    "\n",
    "    tk.Label(frame, text=\"Date (DD-MM-YYYY):\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 14)).pack()\n",
    "    income_date_entry = DateEntry(frame, date_pattern=\"dd-mm-yyyy\", font=(\"Arial\", 12))\n",
    "    income_date_entry.pack(pady=5)\n",
    "\n",
    "    tk.Label(frame, text=\"Amount:\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 14)).pack()\n",
    "    income_amount_entry = tk.Entry(frame, font=(\"Arial\", 12))\n",
    "    income_amount_entry.pack(pady=5)\n",
    "\n",
    "    tk.Label(frame, text=\"Description:\", bg=WHITE_COLOR, fg=TEXT_COLOR, font=(\"Arial\", 14)).pack()\n",
    "    income_description_entry = tk.Text(frame, height=5, font=(\"Arial\", 12))\n",
    "    income_description_entry.pack(pady=5)\n",
    "\n",
    "    def add_edit_income():\n",
    "        income_date = income_date_entry.get_date()\n",
    "        income_amount = income_amount_entry.get()\n",
    "        income_description = income_description_entry.get(\"1.0\", tk.END).strip()\n",
    "\n",
    "        if not (income_date and income_amount):\n",
    "            messagebox.showwarning(\"Add Income\", \"Please enter all required fields.\")\n",
    "            return\n",
    "\n",
    "        conn = mysql.connect(host=\"localhost\", user=\"root\", password=\"anu@123\", database=\"expense_tracker\")\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"INSERT INTO income (user_id, income_date, amount, description) VALUES ((SELECT id FROM users WHERE username = %s), %s, %s, %s)\",\n",
    "                       (current_user, income_date, income_amount, income_description))\n",
    "        conn.commit()\n",
    "        messagebox.showinfo(\"Add Income\", \"Income added successfully.\")\n",
    "        conn.close()\n",
    "\n",
    "        income_date_entry.delete(0, tk.END)\n",
    "        income_amount_entry.delete(0, tk.END)\n",
    "        income_description_entry.delete(\"1.0\", tk.END)\n",
    "\n",
    "    add_edit_income_button = tk.Button(frame, text=\"Add/Edit Income\", font=(\"Arial\", 14), bg=PRIMARY_COLOR, fg=WHITE_COLOR, command=add_edit_income)\n",
    "    add_edit_income_button.pack(pady=10)\n",
    "\n",
    "\n",
    "def display_all_expenses(frame):\n",
    "    tk.Label(frame, text=\"All Expenses\", bg=BACKGROUND_COLOR , fg=PRIMARY_COLOR, font=(\"Arial\", 28)).pack(pady=20)\n",
    "\n",
    "    all_expenses_text = tk.Text(frame, height=35, width=125, font=(\"Arial\", 12), bg=WHITE_COLOR, fg=TEXT_COLOR)\n",
    "    all_expenses_text.pack(pady=10)\n",
    "\n",
    "    def fetch_all_expenses():\n",
    "        conn = mysql.connect(host=\"localhost\", user=\"root\", password=\"anu@123\", database=\"expense_tracker\")\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"SELECT expanse_date, category, amount, description FROM expenses WHERE user_id = (SELECT id FROM users WHERE username = %s)\", (current_user,))\n",
    "        results = cursor.fetchall()\n",
    "\n",
    "        all_expenses_text.delete(\"1.0\", tk.END)\n",
    "        if results:\n",
    "            for result in results:\n",
    "                expanse_date, category, amount, description = result\n",
    "                expanse_date = expanse_date.strftime('%d-%m-%Y')\n",
    "                all_expenses_text.insert(tk.END, f\"Date: {expanse_date}, Category: {category}, Amount: ₹{amount:.2f}, Description: {description}\\n\\n\")\n",
    "        else:\n",
    "            all_expenses_text.insert(tk.END, \"No expenses found.\")\n",
    "\n",
    "        conn.close()\n",
    "\n",
    "    fetch_all_expenses()\n",
    "\n",
    "    refresh_button = tk.Button(frame, text=\"Refresh\", font=(\"Arial\", 18), bg=PRIMARY_COLOR, fg=WHITE_COLOR, command=fetch_all_expenses)\n",
    "    refresh_button.pack(pady=10)\n",
    "\n",
    "    def auto_refresh():\n",
    "        fetch_all_expenses()\n",
    "        frame.after(5000, auto_refresh)\n",
    "\n",
    "    auto_refresh()\n",
    "\n",
    "login_window()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
